
转至元数据结尾
Created by Unknown User (wangxuejie) on 三月 07, 2017 转至元数据起始
1.实现功能的配置都在消费者端：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:rabbit="http://www.springframework.org/schema/rabbit"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
 <!-- rabbitmq连接配置 -->
 <rabbit:connection-factory id="connectionFactory1" host="10.209.11.200" port="5672" username="admin" password="dbn002385" publisher-confirms="true"/>
 <rabbit:admin connection-factory="connectionFactory1"/>
 <!--按项目需求配置,推荐队列的名字为nx.{project-name}.queue -->
 <rabbit:listener-container connection-factory="connectionFactory1" acknowledge="manual" >
 <rabbit:listener ref="amqpMsgListener" queues="nx.farm.queue.test" />
 </rabbit:listener-container>
 <bean id="amqpMsgListener" class="com.nxin.farm.test.AmqpMsgListener"/>
</beans>
2.下面是步骤和说明
1.在消费者端的mq配置文件上添加,配置  关键代码为 acknowledeg = "manual"，意为表示该消费者的ack方式为手动（此时的queue已经和生产者的exchange通过某个routeKey绑定了）

 <rabbit:listener ref="amqpMsgListener" queues="nx.farm.queue.test" />
 2.新建一个类 MqConsumer ，并实现接口  ChannelAwareMessageListener ，实现onMessage方法，不需要指定方法
public class AmqpMsgListener implements ChannelAwareMessageListener {

    @Override
 public void onMessage(Message message, Channel channel) throws Exception {
        System.out.println(message.toString());
  channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);
 }
}
3.关键点在实现了ChannelAwareMessageListener的onMessage方法后，会有2个参数。
一个是message（消息实体），一个是channel就是当前的通道
很多地方都没有说清楚怎么去手动ack，其实手动ack就是在当前channel里面调用basicAsk的方法，并传入当前消息的tagId就可以了，其中deliveryTag是tag的id，由生产者生成。
ack用法
//消息的标识，false只确认当前一个消息收到，true确认所有consumer获得的消息
channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);
nack用法
     第一个参数:该消息的index
     第二个参数：是否批量.true:将一次性拒绝所有小于deliveryTag的消息。
     第三个参数：被拒绝的是否重新入队列,返回false，并重新回到队列
channel.basicNack(message.getMessageProperties().getDeliveryTag(),false,false);

       reject用法,拒绝消息
       channel.basicReject(message.getMessageProperties().getDeliveryTag(), true);