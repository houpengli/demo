spring boot 版本 1.5.2.RELEASE

配置方式
bootstrap.yml 系统级别配置
spring:
  application:
    name: proj
  cloud: //远程配置
    config:
      enabled: true
      uri: http://disconfig.p.nxin.com/private/config/sprCld
      profile: pre
spring:
    datasource:
        name: test
        url: jdbc:mysql://192.168.16.137:3306/test
        username: root
        password:
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        filters: stat
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20

配置中心的配置
mybatis.config-location=classpath:mybatis-config.xml
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://10.211.13.30:6009/nx_proj
spring.datasource.username=dbn_admin
spring.datasource.password=oM0bmpKc-O
spring.thymeleaf.cache=true
spring.thymeleaf.encoding=utf-8
spring.thymeleaf.mode=HTML5
spring.thymeleaf.prefix=classpath:/views/
spring.thymeleaf.suffix=.html
endpoints.shutdown.enabled=true
endpoints.shutdown.sensitive=false
jenkins.host=http://jenkins.p.nxin.com
jenkins.userName=nx_admin
jenkins.password=2FXKR8y_gkyq
jenkins.gitCredentialsId=db97936e-7d85-4eb9-a92b-42782c6d1de7
jenkins.gradleName=gradle2.12
jenkins.sync=false

ldap.url=ldap://10.211.254.49:10389
ldap.base=dc=nxin,dc=com
ldap.userName=uid=admin,ou=system
ldap.password=secret

redis.host=${redis}
redis.port=6379
redis.db=8


application.yml 对外的配置
可以用来定义应用级别的，如果搭配spring-cloud-config使用 application.yml里面定义的文件可以实现动态替换
server.port配置了tomcat的启动端口，eureka实例的名字，以及eureka其他配置。因为我们这里是eureka服务端，
register-with-eureka配置为false，这个配置表示是否将其本身注册到eureka server以被其他发现
fetch-registry配置为false，这个配置表示是否需要从eureka server中抓取eureka上的注册信息
defaultZone 默认地址为 http://localhost:8761/eureak


spring boot启动方式
@EnableTransactionManagement
@SpringBootApplication
SpringApplication app = new SpringApplication(AppMain.class);
        app.addListeners(new ApplicationPidFileWriter("./app.pid"));
        app.run(args);


spring boot 测试
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = ActivitiTestAppMain.class)
@Test

spring boot 运行维护
java -jar部署
curl -X POST host:port/shutdown 优雅停机 (远程调用,开启安全验证)


Spring Cloud组成编辑
Spring Cloud的子项目，大致可分成两类，一类是对现有成熟框架”Spring Boot化”的封装和抽象，也是数量最多的项目；第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream扮演的就是kafka, ActiveMQ这样的角色。对于我们想快速实践微服务的开发者来说，第一类子项目就已经足够使用，如：
Spring Cloud Netflix
　　是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。
Spring Cloud Config
　　将配置信息中央化保存, 配置Spring Cloud Bus可以实现动态修改配置文件
Spring Cloud Bus
　　分布式消息队列，是对Kafka, MQ的封装
Spring Cloud Security
　　对Spring Security的封装，并能配合Netflix使用
Spring Cloud Zookeeper
　　对Zookeeper的封装，使之能配置其它Spring Cloud的子项目使用
Spring Cloud Eureka
Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，它基于Netflix Eureka 做了二次分装，主要负责完成微服务架构中的服务治理功能。

kafka日志中心客户端
HttpClient setHeader 系统ID 当前请求ID  httpUrl
web filter
 org.slf4j.MDC.put("ccid", req.getHeader("ccid"));

dubbo
@Activate(group = {Constants.PROVIDER, Constants.CONSUMER})
public class CallchainFilter implements Filter

MDC.put 日志中加入标示
RpcInvocation ri = (RpcInvocation) invocation; //RPC调用标示
                    ri.setAttachment("ccid", ccid);
                    ri.setAttachment("ccseq", String.valueOf(ccseq));
                    ri.setAttachment("sourceID", sourceID);

Log打印
package com.nxin.log.layout;

import com.alibaba.fastjson.JSONObject;
import com.nxin.log.NxLogEventFactory;
import com.nxin.log.message.AlarmMessage;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.core.config.Property;
import org.apache.logging.log4j.core.impl.DefaultLogEventFactory;
import org.apache.logging.log4j.core.impl.LogEventFactory;
import org.apache.logging.log4j.core.impl.ReusableLogEventFactory;
import org.apache.logging.log4j.core.util.Constants;
import org.apache.logging.log4j.core.util.Loader;
import org.apache.logging.log4j.util.PropertiesUtil;
import org.slf4j.MDC;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.config.Node;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.layout.AbstractLayout;
import org.slf4j.event.Level;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.logging.log4j.core.config.Property;

/**
 * Created by robin on 2016/10/7.
 */
@Plugin(name = "NJsonLayout", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = true)
public class NJsonLayout extends AbstractLayout<LogEvent> {

    private int systemId;
    private String[] sendTo;
    private boolean alarm;
    private String notifyType;

    private LogEventFactory logEventFactory;

    public NJsonLayout(int systemId, String[] sendTo, boolean alarm, String notifyType){
        super(null, null, null);
        this.systemId = systemId;
        this.sendTo = sendTo;
        this.alarm = alarm;
        this.notifyType = notifyType;

    }

    private String getContent(LogEvent event) {

        JSONObject paramJson = new JSONObject();
        paramJson.put("sys_id", systemId);
        paramJson.put("sendTo", sendTo);
        paramJson.put("alarm", alarm);
        paramJson.put("notifyType", notifyType);
        MDC.put("paramJson", paramJson.toJSONString());

        MDC.put("alarm", String.valueOf(alarm));
        MDC.put("sys_id", String.valueOf(systemId));
        MDC.put("time_mills", String.valueOf(event.getTimeMillis()));
        MDC.put("thread_name", event.getThreadName());
        MDC.put("sourceID", MDC.get("sourceID")==null? String.valueOf(systemId):MDC.get("sourceID"));
        if(event.getSource() != null)
            MDC.put("method_name", event.getSource().getMethodName());
        //new
        NxLogEventFactory factory = new NxLogEventFactory();
        LogEvent event1 = factory.createEvent(event.getLoggerName(), event.getMarker(), event.getLoggerFqcn(), event.getLevel(), event.getMessage(), null, event.getThrown());

        return event1.toString().concat("\r\n");
    }

    //old method
    public void wrapEventToJson(LogEvent event, JSONObject json) {
        json.put("sys_id", systemId);
        json.put("msg", event.getMessage().getFormattedMessage());
        json.put("level", event.getLevel().toString());
        json.put("time_mills", event.getTimeMillis());
        json.put("thread_name", event.getThreadName());
        json.put("logger_name", event.getLoggerName());

        if(MDC.get("ccid") != null)
            json.put("request_id", MDC.get("ccid"));
        if(MDC.get("ccseq") != null)
            json.put("no_id", MDC.get("ccseq"));
        if(MDC.get("boId") != null)
            json.put("bo_id", MDC.get("boId"));
        if(MDC.get("sessionID") != null)
            json.put("session_id", MDC.get("sessionID"));
        if(MDC.get("ip") != null)
            json.put("ip", MDC.get("ip"));
        if(MDC.get("sourceID") != null)
            json.put("source_id", MDC.get("sourceID"));
        else
            json.put("source_id", systemId);    //来源于自己

        if(MDC.get("logType") != null)
            json.put("log_type", MDC.get("logType"));

        if(event.getSource() != null)
            json.put("method_name", event.getSource().getMethodName());

        //标记为时间
        if(event.getMarker() != null && event.getMarker().getName().equals("TIME")){
            JSONObject timeInfo = (JSONObject) JSONObject.parse(event.getMessage().getFormattedMessage());
            json.put("msg", "");
            json.put("method_name", timeInfo.get("sign"));  //统计的是某个方法
            json.put("logger_name", timeInfo.get("className"));
            json.put("elapsed_time", timeInfo.get("elapsedTime"));
            json.put("param", timeInfo.get("param"));
            json.put("log_type", "auto");
            if(timeInfo.get("result") != null)
                json.put("result", timeInfo.get("result"));
        }

        //alarm
        json.put("alarm", alarm);
        if(alarm && ((event.getMarker() != null && event.getMarker().getName().equals("ALARM")) || event.getLevel().equals(Level.WARN) || event.getLevel().equals(Level.ERROR))) {
            //json.put("alarm", alarm);
            json.put("notifyType", notifyType);
            json.put("sendTo", sendTo);
        }
    }


    @Override
    public byte[] toByteArray(LogEvent event) {
        return getContent(event).getBytes();
    }

    @Override
    public LogEvent toSerializable(LogEvent event) {
        return event;
    }

    @Override
    public String getContentType() {
        return "application/json";
    }


    @PluginFactory
    public static NJsonLayout createLayout(
            @PluginAttribute("systemId") int systemId,
            @PluginAttribute("sendTo") String sendTo,
            @PluginAttribute(value = "alarm", defaultBoolean = false) boolean alarm,
            @PluginAttribute(value = "notifyType", defaultString = "SMS") String notifyType
    ) {
        String[] sendTos = sendTo.split(",");
        return new NJsonLayout(systemId, sendTos, alarm, notifyType);
    }

}